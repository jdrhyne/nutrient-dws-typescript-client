/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/convert": {
    /** Convert a document to a different format */
    post: operations["convertDocument"];
  };
  "/merge": {
    /** Merge multiple documents into one */
    post: operations["mergeDocuments"];
  };
  "/compress": {
    /** Compress a document to reduce file size */
    post: operations["compressDocument"];
  };
  "/extract": {
    /** Extract text content from a document */
    post: operations["extractText"];
  };
  "/watermark": {
    /** Add a watermark to a document */
    post: operations["addWatermark"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ExtractTextResponse: {
      /** @description Extracted text content */
      text: string;
      /** @description Number of pages in the document */
      page_count: number;
      /** @description Document metadata (if requested) */
      metadata?: {
        title?: string;
        author?: string;
        /** Format: date-time */
        creation_date?: string;
        /** Format: date-time */
        modification_date?: string;
      };
    };
    ErrorResponse: {
      /** @description Error code */
      error: string;
      /** @description Human-readable error message */
      message: string;
      /** @description Additional error details */
      details?: Record<string, never>;
    };
  };
  responses: {
    /** @description Bad request */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Unauthorized */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Internal server error */
    InternalServerError: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Convert a document to a different format */
  convertDocument: {
    requestBody: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @description The document file to convert
           */
          file: string;
          /**
           * @description Target format for conversion
           * @enum {string}
           */
          target_format: "pdf" | "docx" | "xlsx" | "pptx" | "html" | "txt";
          options?: {
            quality?: number;
            optimize?: boolean;
          };
        };
      };
    };
    responses: {
      /** @description Successful conversion */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /** Merge multiple documents into one */
  mergeDocuments: {
    requestBody: {
      content: {
        "multipart/form-data": {
          /** @description Array of document files to merge */
          files: string[];
          /**
           * @default pdf
           * @enum {string}
           */
          output_format?: "pdf" | "docx";
        };
      };
    };
    responses: {
      /** @description Successful merge */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /** Compress a document to reduce file size */
  compressDocument: {
    requestBody: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @description The document file to compress
           */
          file: string;
          /**
           * @description Level of compression to apply
           * @default medium
           * @enum {string}
           */
          compression_level?: "low" | "medium" | "high" | "maximum";
        };
      };
    };
    responses: {
      /** @description Successful compression */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /** Extract text content from a document */
  extractText: {
    requestBody: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @description The document file to extract text from
           */
          file: string;
          /**
           * @description Include document metadata in response
           * @default false
           */
          include_metadata?: boolean;
        };
      };
    };
    responses: {
      /** @description Successful text extraction */
      200: {
        content: {
          "application/json": components["schemas"]["ExtractTextResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /** Add a watermark to a document */
  addWatermark: {
    requestBody: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @description The document file to watermark
           */
          file: string;
          /** @description Text to use as watermark */
          watermark_text: string;
          /**
           * @default center
           * @enum {string}
           */
          position?: "center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
          /** @default 0.5 */
          opacity?: number;
          /** @default 36 */
          font_size?: number;
        };
      };
    };
    responses: {
      /** @description Successful watermark addition */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      500: components["responses"]["InternalServerError"];
    };
  };
}
